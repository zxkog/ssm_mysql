#仅在application-dev.properties里面写出了参数说明
############################################################################################
#服务器信息
#server.port                  服务器端口，避开常用端口，防止冲突
#server.address               服务器绑定ip地址，多网卡时可以指定
#server.servlet.context-path  服务器的根路径。 http://地址:端口/根路径/。。。。   注意都区分大小写
server.port=8083
server.address=127.0.0.1
#server.servlet.context-path=/api
#server.error.path=/error

############################################################################################
#数据源配置
#spring.datasource.driver-class-name                     数据源驱动
#                                                        指定数据源驱动以后出现Cannot resolve class or package 'mysql'
#                                                        原因是mysqlMySQL 这个jar 包依赖类型默认是runtime
#                                                        解决方法 项目上面点击右键（F4 Open Module Settings[打开模块设置] ）Dependencies选项卡里面将mysql的runtime 修改为Compile
#spring.datasource.url                                   数据源地址
#spring.datasource.username                              数据源用户名
#spring.datasource.password                              数据源密码a
#spring.datasource.initialization-mode=always            初始化模式（springboot2.0），always为始终执行初始化，embedded只初始化内存数据库（默认值）,如h2等，never为不执行初始化。
#spring.datasource.continue-on-error=false               遇到语句错误时是否继续，若已经执行过某些语句，再执行可能会报错，可以忽略，不会影响程序启动
#spring.datasource.schema=classpath:schema-database.sql  表初始化语句
#spring.datasource.data=classpath:schema-data.sql        初始化数据
#spring.datasource.sql-script-encoding=utf-8             文件的编码
#spring.datasource.separator=;                           为sql脚本中语句分隔符

#spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver   不写，程序会自动选择对应的驱动
spring.datasource.url=jdbc:mysql://localhost:3306/db_ssm?serverTimezone=Asia/Shanghai&useUnicode=true&characterEncoding=utf-8&useSSL=false
spring.datasource.username=root
spring.datasource.password=toor

#spring.datasource.schema=classpath:schema-database.sql
#spring.datasource.schema-username=root
#spring.datasource.schema-password=root

#spring.datasource.data=classpath:schema-data.sql
#spring.datasource.data-username=root
#spring.datasource.data-password=root

#spring.datasource.sql-script-encoding=utf-8
#spring.datasource.initialization-mode=always
#spring.datasource.continue-on-error=false
##spring.datasource.separator=;

############################################################################################
#logback配置
#以下是application里面的简单配置，详细配置可以在logback-spring.xml完成
#logback-spring.xml是官网推荐的配置名称，即使不使用logging.config这个配置指定路径，软件也会在自动在配置目录里面搜寻logback-spring.xml文件

#debug=true                                   打印debug级别的日志，不设置的话，打印出来的日志级别只有ERROR, WARN 还有INFO
#logging.config=classpath:logback-spring.xml  引入的详细配置文件（比如按日期输出），application无法做到详细配置可以卸载这里
#logging.level.                               logging.level是日志级别控制前缀，可以用*代表全部，但是最好分别配置，做到控制的精细化
#logging.file=./logs/app.log                  日志名，注意前面有个点  ./     这里若不配置具体的包的日志级别，日志文件信息将为空

#debug=true
#logging.config=classpath:logback-spring.xml
#logging.level.com.example.ssm=DEBUG
#logging.level.web=DEBUG
#logging.level.sql=DEBUG
#logging.level.root=DEBUG
#logging.file=./logs/app.log

############################################################################################
#Mybatis配置
#mybaits配置方式有两种，一种是全部在application里面配置，一种是mybatis.config-location引入一个配置，详细配置放在xml里面。
# 建议配置在xml里面，使用mybatis配置文件以后，其他的配置就不要在application里面配置了。

#mybatis.config-location=classpath:mybatis-config.xml               MyBatis xml配置文件的位置。
#mybatis.check-config-location=true                                 指示是否执行MyBatis xml配置文件的状态检查。
#mybatis.mapper-locations=classpath:/mapper/*.xml                   Mapper xml配置文件的位置。
#mybatis.type-aliases-package=com.example.domain.model              用于搜索类型别名的包。（包分隔符是“ ，; \ t \ n ”）
#mybatis.type-handlers-package=com.example.typeHandler              用于搜索类型处理程序的包。（包分隔符是“ ，; \ t \ n ”）
#mybatis.executor-type=batch                                        执行者类型：SIMPLE，REUSE，BATCH。
mybatis.mapper-locations=classpath:/mapper/*.xml
mybatis.type-aliases-package=com.example.ssm_mysql.domain